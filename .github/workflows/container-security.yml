name: Container Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  docker-security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [contract-service, api-gateway, llm-service, discovery-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t ${{ matrix.service }}:latest ./microservices/${{ matrix.service }}
    
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.service }}:latest'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
        ignore-unfixed: true
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'
    
    - name: Run Docker Scout
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ matrix.service }}:latest
        sarif-file: scout-${{ matrix.service }}.sarif
        summary: true
    
    - name: Upload Scout results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'scout-${{ matrix.service }}.sarif'
    
    - name: Run Anchore Grype scan
      uses: anchore/scan-action@v3
      with:
        image: ${{ matrix.service }}:latest
        severity-cutoff: medium
        fail-build: true
        acs-report-enable: true
    
    - name: Inspect image with Dive
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          wagoodman/dive:latest ${{ matrix.service }}:latest --ci
    
    - name: Security benchmark with Docker Bench
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ matrix.service }}:latest
        format: spdx-json
        output-file: '${{ matrix.service }}-sbom.spdx.json'
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.service }}-sbom
        path: '${{ matrix.service }}-sbom.spdx.json'
    
    - name: Compliance check with Falco rules
      run: |
        # Install Falco
        curl -s https://falco.org/repo/falcosecurity-3672BA8F.asc | apt-key add -
        echo "deb https://download.falco.org/packages/deb stable main" | tee -a /etc/apt/sources.list.d/falcosecurity.list
        apt-get update -qq
        apt-get install -qq -y falco
        
        # Run container with Falco monitoring
        falco --daemon &
        docker run --rm ${{ matrix.service }}:latest &
        sleep 30
        pkill falco

  image-signing:
    needs: docker-security-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v2
    
    - name: Log in to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Sign images
      run: |
        for service in contract-service api-gateway llm-service discovery-service; do
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:${{ github.sha }}
        done
      env:
        COSIGN_EXPERIMENTAL: 1